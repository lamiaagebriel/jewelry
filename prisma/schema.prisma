// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]

  // Database
  role       Role     @default(CUSTOMER)
  orders     Order[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model Image {
  id         String @id @default(cuid())
  product_id String
  src        String

  product Product @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@index([product_id])
  @@map("images")
}

model Address {
  order_id     String  @unique
  name         String
  phone        String
  address_line String?
  zip          String
  city         String
  country      String

  order Order @relation(fields: [order_id], references: [id], onDelete: Cascade)

  @@map("addesses")
}

model Product {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  image       String
  sizes       String
  description String   @db.Text
  category    String?
  price       Float    @default(0) @db.DoublePrecision
  discount    Float    @default(0)
  quantity    Int      @default(0) @db.Integer
  is_new      Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  images Image[]
  orders OrderProduct[]

  @@map("products")
}

model OrderProduct {
  id         String @id @default(cuid())
  order_id   String
  product_id String
  price      Float  @default(0) @db.DoublePrecision
  discount   Float  @default(0)
  quantity   Int    @default(1) @db.Integer
  size       Int    @default(0) @db.Integer

  product Product @relation(fields: [product_id], references: [id])
  order   Order   @relation(fields: [order_id], references: [id])

  @@index([product_id])
  @@index([order_id])
  @@map("orders_products")
}

model Order {
  id             String         @id @default(cuid())
  user_id        String
  products       OrderProduct[]
  address        Address?
  status         Status         @default(PENDING)
  payment_method PaymentMethod  @default(CASH)
  is_paid        PaymentStatus  @default(UNPAID)
  // actual_amount     Float        @default(0) @db.DoublePrecision
  // amount            Float        @default(0) @db.DoublePrecision
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt

  user User @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@map("orders")
}

enum Status {
  PENDING
  PROCESSING
  CANCELED
}

enum PaymentMethod {
  CASH
  PAYPAL
}

enum PaymentStatus {
  PAID
  UNPAID
}

// model Review {
//   id                  String    @id @default(cuid())
//   title               String
//   content             String
//   rating              Int
//   user_id             String
//   product_id          String
//   created_at          DateTime @default(now())
//   updated_at          DateTime @updatedAt

//   user                User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
//   product             Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
// }
